-- Thanks to Patrick Lightbody for submitting this...---- In your Quartz properties file, you'll need to set -- org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.PostgreSQLDelegatedrop table @TOKEN.TABLE.PREFIX@qrtz_job_listeners;drop table @TOKEN.TABLE.PREFIX@qrtz_trigger_listeners;drop table @TOKEN.TABLE.PREFIX@qrtz_fired_triggers;DROP TABLE @TOKEN.TABLE.PREFIX@qrtz_PAUSED_TRIGGER_GRPS;DROP TABLE @TOKEN.TABLE.PREFIX@qrtz_SCHEDULER_STATE;DROP TABLE @TOKEN.TABLE.PREFIX@qrtz_LOCKS;drop table @TOKEN.TABLE.PREFIX@qrtz_simple_triggers;drop table @TOKEN.TABLE.PREFIX@qrtz_cron_triggers;DROP TABLE @TOKEN.TABLE.PREFIX@qrtz_BLOB_TRIGGERS;drop table @TOKEN.TABLE.PREFIX@qrtz_triggers;drop table @TOKEN.TABLE.PREFIX@qrtz_job_details;drop table @TOKEN.TABLE.PREFIX@qrtz_calendars;CREATE TABLE @TOKEN.TABLE.PREFIX@qrtz_job_details  (    JOB_NAME  VARCHAR(80) NOT NULL,    JOB_GROUP VARCHAR(80) NOT NULL,    DESCRIPTION VARCHAR(120) NULL,    JOB_CLASS_NAME   VARCHAR(128) NOT NULL,     IS_DURABLE BOOL NOT NULL,    IS_VOLATILE BOOL NOT NULL,    IS_STATEFUL BOOL NOT NULL,    REQUESTS_RECOVERY BOOL NOT NULL,    JOB_DATA BYTEA NULL,    PRIMARY KEY (JOB_NAME,JOB_GROUP));CREATE TABLE @TOKEN.TABLE.PREFIX@qrtz_job_listeners  (    JOB_NAME  VARCHAR(80) NOT NULL,     JOB_GROUP VARCHAR(80) NOT NULL,    JOB_LISTENER VARCHAR(80) NOT NULL,    PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER),    FOREIGN KEY (JOB_NAME,JOB_GROUP) 	REFERENCES @TOKEN.TABLE.PREFIX@qrtz_JOB_DETAILS(JOB_NAME,JOB_GROUP) );CREATE TABLE @TOKEN.TABLE.PREFIX@qrtz_triggers  (    TRIGGER_NAME VARCHAR(80) NOT NULL,    TRIGGER_GROUP VARCHAR(80) NOT NULL,    JOB_NAME  VARCHAR(80) NOT NULL,     JOB_GROUP VARCHAR(80) NOT NULL,    IS_VOLATILE BOOL NOT NULL,    DESCRIPTION VARCHAR(120) NULL,    NEXT_FIRE_TIME BIGINT NULL,    PREV_FIRE_TIME BIGINT NULL,    PRIORITY INTEGER NULL,    TRIGGER_STATE VARCHAR(16) NOT NULL,    TRIGGER_TYPE VARCHAR(8) NOT NULL,    START_TIME BIGINT NOT NULL,    END_TIME BIGINT NULL,    CALENDAR_NAME VARCHAR(80) NULL,    MISFIRE_INSTR SMALLINT NULL,    JOB_DATA BYTEA NULL,    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),    FOREIGN KEY (JOB_NAME,JOB_GROUP) 	REFERENCES @TOKEN.TABLE.PREFIX@qrtz_JOB_DETAILS(JOB_NAME,JOB_GROUP) );CREATE TABLE @TOKEN.TABLE.PREFIX@qrtz_simple_triggers  (    TRIGGER_NAME VARCHAR(80) NOT NULL,    TRIGGER_GROUP VARCHAR(80) NOT NULL,    REPEAT_COUNT BIGINT NOT NULL,    REPEAT_INTERVAL BIGINT NOT NULL,    TIMES_TRIGGERED BIGINT NOT NULL,    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 	REFERENCES @TOKEN.TABLE.PREFIX@qrtz_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP));CREATE TABLE @TOKEN.TABLE.PREFIX@qrtz_cron_triggers  (    TRIGGER_NAME VARCHAR(80) NOT NULL,    TRIGGER_GROUP VARCHAR(80) NOT NULL,    CRON_EXPRESSION VARCHAR(80) NOT NULL,    TIME_ZONE_ID VARCHAR(80),    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 	REFERENCES @TOKEN.TABLE.PREFIX@qrtz_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP));CREATE TABLE @TOKEN.TABLE.PREFIX@qrtz_blob_triggers  (    TRIGGER_NAME VARCHAR(80) NOT NULL,    TRIGGER_GROUP VARCHAR(80) NOT NULL,    BLOB_DATA BYTEA NULL,    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)         REFERENCES @TOKEN.TABLE.PREFIX@qrtz_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP));CREATE TABLE @TOKEN.TABLE.PREFIX@qrtz_trigger_listeners  (    TRIGGER_NAME  VARCHAR(80) NOT NULL,     TRIGGER_GROUP VARCHAR(80) NOT NULL,    TRIGGER_LISTENER VARCHAR(80) NOT NULL,    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 	REFERENCES @TOKEN.TABLE.PREFIX@qrtz_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP));CREATE TABLE @TOKEN.TABLE.PREFIX@qrtz_calendars  (    CALENDAR_NAME  VARCHAR(80) NOT NULL,     CALENDAR BYTEA NOT NULL,    PRIMARY KEY (CALENDAR_NAME));CREATE TABLE @TOKEN.TABLE.PREFIX@qrtz_paused_trigger_grps  (    TRIGGER_GROUP  VARCHAR(80) NOT NULL,     PRIMARY KEY (TRIGGER_GROUP));CREATE TABLE @TOKEN.TABLE.PREFIX@qrtz_fired_triggers   (    ENTRY_ID VARCHAR(95) NOT NULL,    TRIGGER_NAME VARCHAR(80) NOT NULL,    TRIGGER_GROUP VARCHAR(80) NOT NULL,    IS_VOLATILE BOOL NOT NULL,    INSTANCE_NAME VARCHAR(80) NOT NULL,    FIRED_TIME BIGINT NOT NULL,    PRIORITY INTEGER NOT NULL,    STATE VARCHAR(16) NOT NULL,    JOB_NAME VARCHAR(80) NULL,    JOB_GROUP VARCHAR(80) NULL,    IS_STATEFUL BOOL NULL,    REQUESTS_RECOVERY BOOL NULL,    PRIMARY KEY (ENTRY_ID));CREATE TABLE @TOKEN.TABLE.PREFIX@qrtz_scheduler_state   (    INSTANCE_NAME VARCHAR(80) NOT NULL,    LAST_CHECKIN_TIME BIGINT NOT NULL,    CHECKIN_INTERVAL BIGINT NOT NULL,    PRIMARY KEY (INSTANCE_NAME));CREATE TABLE @TOKEN.TABLE.PREFIX@qrtz_locks  (    LOCK_NAME  VARCHAR(40) NOT NULL,     PRIMARY KEY (LOCK_NAME));INSERT INTO @TOKEN.TABLE.PREFIX@qrtz_locks values('TRIGGER_ACCESS');INSERT INTO @TOKEN.TABLE.PREFIX@qrtz_locks values('JOB_ACCESS');INSERT INTO @TOKEN.TABLE.PREFIX@qrtz_locks values('CALENDAR_ACCESS');INSERT INTO @TOKEN.TABLE.PREFIX@qrtz_locks values('STATE_ACCESS');INSERT INTO @TOKEN.TABLE.PREFIX@qrtz_locks values('MISFIRE_ACCESS');commit;